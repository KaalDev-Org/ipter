# Production Docker Compose Configuration
version: '3.8'

services:
  ipter-app:
    build:
      context: .
      dockerfile: Dockerfile
    image: ipter:latest
    container_name: ipter-application
    ports:
      - "80:80"
      - "8080:8080"
    environment:
      # Database Configuration - PostgreSQL for production
      - SPRING_DATASOURCE_URL=jdbc:postgresql://ipter-db:5432/ipter
      - SPRING_DATASOURCE_USERNAME=ipter
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=org.postgresql.Driver
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.PostgreSQLDialect
      
      # Gemini API Configuration
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - GEMINI_API_URL=https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent
      
      # File Storage Configuration
      - FILE_UPLOAD_DIR=/app/uploads
      - FILE_PROCESSED_DIR=/app/processed
      - FILE_REPORTS_DIR=/app/reports
      - FILE_THUMBNAILS_DIR=/app/thumbnails
      
      # Security Configuration
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=86400000
      
      # Application Configuration
      - SERVER_PORT=8080
      - USER_MAX_CONCURRENT_USERS=${MAX_CONCURRENT_USERS:-10}
      - USER_SESSION_TIMEOUT=3600000
      
      # Logging Configuration - Production level
      - LOGGING_LEVEL_COM_IPTER=INFO
      - LOGGING_LEVEL_ROOT=WARN
      
      # CORS Configuration
      - CORS_ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost}
      
    volumes:
      - ipter-data:/app/data
      - ipter-uploads:/app/uploads
      - ipter-processed:/app/processed
      - ipter-reports:/app/reports
      - ipter-thumbnails:/app/thumbnails
      - ipter-logs:/app/logs
    depends_on:
      - ipter-db
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

  ipter-db:
    image: postgres:15-alpine
    container_name: ipter-database
    environment:
      - POSTGRES_DB=ipter
      - POSTGRES_USER=ipter
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ipter-postgres-data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ipter -d ipter"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Optional: Redis for session management and caching
  ipter-redis:
    image: redis:7-alpine
    container_name: ipter-redis
    command: redis-server --appendonly yes
    volumes:
      - ipter-redis-data:/data
    restart: unless-stopped
    profiles:
      - cache

volumes:
  ipter-data:
    driver: local
  ipter-uploads:
    driver: local
  ipter-processed:
    driver: local
  ipter-reports:
    driver: local
  ipter-thumbnails:
    driver: local
  ipter-logs:
    driver: local
  ipter-postgres-data:
    driver: local
  ipter-redis-data:
    driver: local

networks:
  default:
    name: ipter-production-network
